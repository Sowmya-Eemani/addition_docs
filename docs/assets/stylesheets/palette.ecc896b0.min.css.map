<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"ebbfb3e630f07bb1360c86233576f9a8b35ad0fe1a2ecee81bcd9e609cc68fa414a3d1e5c7c680ebb420be1fbff374d1b5bd9062eff34065345b31af747ce9196df76598b4e520db269f03127cc9e6f7b0b3e583e8891ca102eb9b07a4bb0b42f917d8e1c85f9df9b37fc6a9e88450b308088fc8fec032d346f6c4e506d6a08b5e19b9a46b1b81fb120ad049069dfc463dc096544220a60cbc4ed9e6426f8179dba1acf9aa574450afb87dfc2af480aeea5313f85910b8ecb0ad0a79e550cd594cfa2e62c6a73f95f6a826c81af53a1ce841f2344e899de61cdd21b5517e905c976749f3f07850cb982a96750c5727c96682e92313ed250745efbc6d99dbf6a3db4317faa3507d9ac59f9953c4412a85f762047249b6e739f2b609eab46987684d971cba3efb8c3c8dc5b656fa76bbff67dcdd742fd01e97ea93741ec35e0042c412eba41e58ae8d41679aa7448f2a18df26da428d1452df24b2854b668befae54679e351bd5a5abbb190b18a55cc4f28ff196d478adc4b7fc834189d4ec5d63f71191218bedc850926e280f5b6032259268be5b86a5f3a42fe68fceedc5a0376ac06c36f8d2d702d69fcdeca7d11cd56272b1f60c1ceee2342e580a618dfa7581d97000d5b78affefc29315c61a1ea6756a3434bde46d6f3da9839304846cc82a84a3ab5f9917a2b34b74e5f565e0e710963acdd82dcca40890f4998fac0d141acf1018dc0fc72f4ed2ec85201daa9792c8d0c06bf9bd0386119b32e884dbede9b2fa046f14f17d50b55ca029fac950981ee54fbdec287eb5bb97fd1879f8cea6915cf248ee2baa91f745242e7f9426cba47e9388b6efe714753a121af1a159fb66c46358739acb38e2994bfd33333328a8e3961451eccf00f09e975def06f0812b300c1462c5ba7eeb9be558e9e6ea0f0bd5dfdf3e66abce754c265ab26bbce5731293da156fb9d9f8e2257bd65094972c438e904074e47416588d86758461c4d8b78e3d3df0e25f28fcda66bcba26a05ab46e75a6102f4a3a883ae75f7672f38597378b8ff485ac2aa385067054121c44c9209b7795e9a3968ce0b8a69a0af8414bf99923c1dd35067e1d13023f97eef2af90d5cd62af13c36bef21a2d91ad3312a85a5ef95853ee90961f16e3931152ea86edb329ec220cd430b81ec18225c99cffc441ee8a659769be45f7172e6354710618f55e62b713920ced3c0d7eeda1afc49f9a60b937cc86763d00f6241b01f1af2f08a495e9a529016fc5896a5140c373eb9787dda010e06676e861b7b5d2e9cb1398f7da322753a283b88ff89ab4cce5c8d93c153e63e718274a90cc464ba5fe355ac5da03ab14d670e5492a991fef2cc9fd8a15e9ddd843c6259969649932540214710fe3faa65d60bb6c0a6efa0a2a81c0397517b255895fe668f556639b1354da2a11a9d58ace329eb7703c63df6722c7b670393f8acb85ac11c69dbfd05c85b8a69f02c669526ecb41c8d87d55bf73c0eaa43a3fb255b5a6d14aa9a90fadc7610d964502519bf4fd3ba159ff2e9542466c0879f9781e166ee5fbbb4815e87296b5238d8368d7dcc39ea14ccce03d13747af0c5fdc7093e18517a0e09aa9eb8868ab25f3ee873cd2af83e2494daa59e3d7e62a9208959318e1e785c112fc4bdaa384a2a682c424141de5986757bd2c44a0a0a57d6b37c540192d4ef35ecda0b95205b7edd70533dce9818e09c1a4df53f41f7093f59a9c455618863b2db087edb9cf906cfe3a6754b693ec653c0161bc05f79d12f8d1f9e22428ab6e54d429836177d12de77cccb1e2e739fd30b47f32303e868ba76c45e375050035ccfd19db04f0e008d33c0f801dc5fe0f22dc516e8c0b4efb988050e2e4f8910b82f851c9a71b0586740459c1fc00aa732b728089690af7755f7c44618469c919939b881c9a5eae42a30875212c6531a262039d228e3540680dd7f35842cc9fd0f90a4102ee228cfbe6a508fa3c65f262e85cd2c0e5365a1a5e3954ecc9ca7c8259486e93b35e6406f2feb372cc40f2db41c77b03e1d1bb55aff0e0cdc16f2e4086ffd79f904977bce9c0aaee382148b095c864fb1f15700d84e3f0fcbe61fbcb0987a997b627a3b16b129b16f46218a8598f44a5b57962a01f1578740dd64e312aea78aaad62c29d1fb716a83b3c3f0e9124325af09b5ffb60eb0821cb08c130542fb896ec4f0e615ddaa416ffc5a2a52f1347a626e16c9e69fbce467df62427d5e16f7f588ef6b1601d44898478cc0168155c6d74fa43fc41b447f9d06f765fd2b34a02ecc46e2ce1c0cd292ea5ccbf245bf1875bad9a2a0b1f4b2ef6eff54a9d3af14e6dc0d575d42300deb577220a0677716fe835244c3362b838a59dc6126393599de6a389e209c41d322dfd80c7be6295ac4052c2e9d27751d25de11e38d742f5a01ee98c05be03258cdefbc0969bb974c79a40850ab99b22eaaf1e193634e865ce5397305f99850041b7ca922caa9b64e67206be02fc2c4afb5129949bb57e57b1dec8b29c3ca5899bb6c4584cdee1e83cab656da67488f265a2d6a1455934da64a6c93be91bf7ff97c83c28df8ebf68dfd236eb19d8317365849be8c703638e9a8284312499ffc5c833be3c80dc70ddff998bf2e13f41a332b2b1db3f6ba9721af80853c47f20f4d563a67967ce81066d616e9bbc989db714ab6870543ddc2eb80bdb2aa8ded3456e4a8376d73191dbf23154aa7c893c9391db8efc64cc3908f590c439903ec863ba792175de2703c7a8dc6a5efa9ef27b08df1e2076665f90d0745b8d6da2772b3f884ef1b5c5eb33fc52faf31a0cc2f2d909f489aaff6fedc31af875789dcec21e73a33fe996abed7f4bbff7eb0635a2d686d655a1879f7a2794ea83b23b89a4b72749633feb4f1d65814799597a237d553a336b642a14ded55858eb32cf886c71f0a68f64bffd68ae498cd26a77a19f468b633185fa940332053c15e6db9a8ed7dafd544470b6ed1355b33291cfbbe1262de046514dad7ea227234320e014d20803b3e63db4aa0433b0a84de00c3215461398088306b640d3a05ac62c1664a912a37467462cfab7c9083b1792e27620044764b5a470b69a5fcde978a5a9e4cda81a238f6bb9aba8597e5c5ceeec9f3daad30599eba724ab40c12badc4b090bd968f9b0b69f3ada4f9fd4dc61d9d85f767882f7462878e951e24e383bdecd3ea9e2c6cd828a63e49ea0b4fed81a7f5488100673931899c56cdfa82e6c6c6dbefaef39bf68a9bc6283b6654c58f1841badf8d17239456c8b05433bec9fb066e33e4b1618b34288b570c43119e9d6b79e3327bbe5bd2d998ad2283458f76299e8237bc476d623d3d0548917e0ec4d6959340d56cb958b69dfcb79200b56cbb59620cb183055e1cd190f12e7b4b66084cc98363735d95808ef23db1683cdb2003f6f29fbeb5f9d7f730b8661f9f2722682cd2a2bf2e66b5b9ddd81051ed3de6b2ef54f4461a6b515c07019468ab03c97aed5883b8744e30978ef548cfdd2467b071a6f6c15e564c9978822d60dc1fd1fbed3ad4939fdd1bcdfda7c3dfb045efd860ce35e9d5b13e1a2a31222c36df8551d2325008045fb143f5649cbf3fdcb1b77e270a6988a6381fa5470a06ef7be88dcfbc51eb60d55657186f567a236db8a8dd73ec2cb3c4b2376b2a1b99e8bd9aca1acf356b5e0d2aae628b0ccf397d4c7b49e2e01f873546d871c0b53863c1e34ddf62fa3c6d6c3cd9468ce3caedcac15807234c1d4bfb83c074765b7453419bf5d69091326d08a3c2667dc888b42360b2180ad164c23176e77db7a6df956866588c408ad5687065503017561098930e0b6036d60fe4315b51480586782889c86a7b10c81215bb7b0a22b2711a1a4b01cd536dc5af7318e3aed015c14a8ce6a81545ef263be04febd3b2f489031a94dd9f11cedd54bcfe9d43328886d4ad748055111a9d7f3532c6801b039637be73993d7e12706fc1e1554bce6b60209d5f5bc502d33d043c3178494fbc311e52130a0fdb905db63ba1cc1c6230e324cc6e88f93d43a1da5502a503e5ffc85a623b17e275b10d765b72a83339c799cf0437590c7f45b5aee66bc299384d06c77a4ad1df25fb49b8b385d24b1c8f673350577e1188b6a3bee26e523274f283e1241fdc62c527c08c9fe1ae76ef5beac5bef2a066d844421ed18e5d992be014b3de47e9fe14648d68753e358deaace586720738fcdbccf05693e81e8b731ddf7ad6f03112377d16519a4d789b7ef7f856ee902f2c87ca4594ee00cc75889b364e7a2002238bb85777c1df580039c2814f3483c46bd3623325d6128e2301820731595b035e5e44d04078a21025127718ed9f7f8e441edbdefe4b16cf6ebd0218cc51b39633aeb3d3501f13376ba773e2d907b3df61c5d8dba91563ccbb214f0e4cc01730c10f580c9e26a8f7d5ee9bcc35f471b8db6232b69c37a545dd822530bbdd1c16ff8b9a10b3dd8c0b035f479b71c1157f3c4107141c6ac077c39d347affa2a4da604464d30456abaeeb8585857c1ec2a66f159b39399d6d7e5283f7326e4ce91074fb22e7c7a35d6baa00f6c2a256d2bb13e48cf63faa963878cd531c30d2a715832b640cea1fbf9d9b9e6f65972812dfb554cded8e1fb1e91884a46d343bb429240229a9059410f7cc5deccf9a45e5ce2c805325d80b1bfc134c97bcafcb92a142d7f5dda98fc3b4d523deccb2518a22e5d077167e6f46d484df691d587e7da813d1e14fd82cca5af7fbf2c4daebb298151963f9b53e3f5037d3733b5613a61e688425abfc504014268611c732cf6c89cfc7b9d27fb2edebf00710010f54d64a7f39933e376e19ac1627895bd42d39b3b5fc9491fac1110b0346c18db61416b4dceba9ce9cdae460b554ab67d149da2303cadf32257fb68971b1df6a9f877f4c048d2965826a4da8b8328a35666def5314776d97891efb15cc19eec019b22d1a2173985ae2ed1e2bda4fcc1bb2cb54c79f1556aea523f32ebb1472287e04731a28316e4019f0d7fe6e741438b46a467ff3dbc19f05d950d43c5e300c7b6ee6086024d9b8a69bfd00bc8dad3ce72e054941891f9f64d1fd937fc061f081d19d5b0e5e8d2570a52944960b2e7eb4251b7fcf8709c069b001bfba14dcf4af43e2a08fb988d48902766a82fd20a1a471f295ec8b61e5e96bcec26c423b90581499dc369594993c911b57aa6c8d856c546e8f60d6c7703186","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"643649ba80ed23fdeeac84c02c742703"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
