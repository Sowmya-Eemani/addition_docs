<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"53544314a2a5ba199b47d3d084a0bac6c75acd60434dfbfc1799af8bdd0572fbbef3ea9a19413a13215215a0397c99666004683784d65576b85806b419bdc9308bb6a6d9da940b113a1ac4b562b6296539cba9d35c79c796f8cf0f20364b6b3256daa1d64369acd695fc05c1fda1e177b879b41d9e2ad6b722c1a06b3775678c22c4e8e3c6711f5abdf5e64fb537ac1f760757e6d8d8224cdfb91c3552bc6680f589028c06cca2e1a0c0b1c45525ab8ac7c07eb659f0a664c638dd163e1c165d75a65b669d756c5812e4920b0286f20019337eb0b689d21973e4f70bc96a8f916d1f79628d88bbb5e124d55dac23290ff078802fa34a50767e7c6b660e90bd5013a055768ddbd2625c612b252afbaf5f46e0c8bd529aca47942968b9d575cb647b5457ab506ef7d3695a9ebfef98a4f893852d09e8d64cf8d36e48ef7657ed9394f5a3a782870eecd5e3accc20749f6372d8d3d8383eb810cb030f55e2237bc1f694aa54090439843e2c39680b96761fd5b6b7acb2dccb6aa8e1882d0a63183a3b89da97ceb15c8b98f3b473f21a36d7a2db7dbdc5b033742862fc1affccfcd749b5c784307b23e64e0467a50cd669450616d5e3ed0a67ba1a7937e9f1ec2e8fac5d3afea3e6dfcf2133db9b894ca412e30ea44119a812af2db7ee2e8820eb9890eb7cfde9e785c68beab08d4cc5ff9ba5ad2a17be4e48ec7a0ee053251e9e689fdeac81f60ce4d4241869fd8fdd147d7780403dcb50622fb86ae60fdb30a3d65a0bd46ef1dd5d58a8b8beba6210449ae58835ab978dba83a52f791e0fa5e28c9c4876213df73d6b825fc4b53f273855a5a11e6c1e245b7daaba952a05eca7a2184b8e9ac6ef1a793e34b8256dcab7f49c1c829bced67ea6e36e0b08c021ef61e91621e28c85ef58d31250eefda5b96996f77bde5ad5742eb9a6ef0ff78a4acba50d4785aa11f30140b65d9cea5311473cee1c67e43ca218b81b3ba54c7a384e07c164b570f6a1a5f9eb198b5ce59f85d62d7c817c730936fc3ea5692441d3f90bbb21b031413579ad7ccaaa844347efd3806c98962c818ebcd1248d025c2928240f0db3cdcb2309737674edc78cf06cf79d73e074e4cea8fa88bf3d6a14570650de56a2a2e7a8bd0d82ab1b09ad1905752a9fc15314b01fcd61bf863476b428966d63555b5122e7b669e540c9a48a11b88b0c2ec1716de12190c4982ec7ef39d9c8413b91e0f3c87b83f4aab543914d61fcdf9f6fd1f5b5cf1b1602eda52738f56b7286ab02702d13f949117d9823b670757190b07dc0443c4e8598bf10b597a0c6ae67cc6e04a8f107a3533fd065019bd7a04b3c66049c3d2a2d2cb44ffd40d9832a804744b0e4a4f8d001a8ae1621074a692d429a6023d389fe9b061db5ecb063a0b587627dccdfd4a55723c8cf58a467574c789641600fa8ef45993f70221756a274a54e70d8dace3160c3748823b826ace9d54970044bd5b8f1be84f75fa836d081bdbf593ff708d974bf40a2b0406eaf78bb76ab626d4ae1dd71b3b9dc2ed937b8fda4e89730e5ecdc27c46cea7fa9539c8ea06125e9d9ffc3f56e034d381313d048ce7a1e8d889562c0d6aacaabbe4b3c1a780d4503193c35e445dfbc11a3dd0e17fc9dfa2c30a18d7ced5143509b797eb47d39f039d66f90a9cfad76ed719fb3ca12687e2f2876eeacb791ea91a7f5ed86731c7e394f2b2b3cc6f9227dbbda0654441a3ffa3a291a204f58b60d7b67a6e5ed4b4684b66a384ae1a0ea247e04bb61944016501c486b2dfae5bb9b872205a69df861ae5b7320b1c4a41be32251c95ce20e7b2de8bc3cc87cafccef78dc9a3dbe3e2058a2057de1ec1538e35bc8703fac88e9989ea41b781393270d5eb4f84b6e444349272c5d467687082801704ab9fe296553496668dd364b2b37ca360150bada1d3a39f06cb70b2959aef87a9c64c05574cbc3fda647b18dbd54611d757f66d128cc8d524426861ef2704772c6f55db4800486a8eb1d54001354bc929de625232f14b43201a1136374f931e5b7df211987c3f1e588f0457a4136e193ef02ba0d97201a639b85a1b665969a0bf158291c3dd8e1076701cd2c73621315e9fe3e0b0a9227dcc8615398dc7f80027e892905ff6d7b320ab65ffa0a90209c67537796591a95c84a35a722631559555647583e1f6953c437e281f5ae4f55795d1ac8b77d2283862f9b437c57145eca684aa707c3f54af6fbfd1181a97521bce14e77ec6c76020a6f2ec0b3bc8c8bee0d98b1662341129df952c2fbf4b57ec60f98e3ed869ec3bf66a10833f60ae30052508d9a771c53ffc61cb44d1ff3a400f51e510903c91d2a1d5530f463b9355b12c45e84151fb3e5fc5ecafa5c942a06e7868e22c29444c7bf15eb3396ac715a259cff8e73551e0e32163fa06f264e4dc0f8853b3c580869acbf60f9cca575b2d252f945760e57e7d916dae66e6156035e20479bdda05a85763832ec368a871126fac4662d7bb50d950a4c9ef738fc3c88b82c542d0f0834dbbb7fb8c4af0bb49cff88590a1a4d2b9a454630f154c822b9060a420a31083a3b39decaaf53a7e1789e0856962b5ca7ae68fcef06ee7400c3c52e18d57ee1d411dea5c7df7ad26eb96595c24818218ed648f4729881791178fd0286e7a51131ccad05f84c67a8e90150aa1974b88b9ccf01eeb7ae3be4da18a71c67e425a73d57b6643ffd8b86fa42e9260f1bd699d90982a323b5ca6f56a1670296ca4fd743344b11a0b49808e2e01f8bc5796fbcce5168b2874615f035890e369cfe7df6fdac76ba0764107dd84a689b8589559d525c155f00eca486b2d71ca59cc8bd161fecb84d20a9572a83563fa926af9549a2178a24589ae374c7f376ad2e87197a1ceac652937cdbd3e386aab78f5053d05bcf6e8eaa4350c242ab3a2ec29179098903f9436abcd8cb15e05ad2a74a21fe423f49476ab4344f8621d28b11b2dc26446b4b683f4116b7a92c7abc5fb1ab28b1ae4b8aff06f2233236ed78e3f04a4b8caec01c45fdeca628917c0bc5821c514ac2ea3e39afc0e45f70cf2dec799ea2b9d53b6f89d0fa9dca19ca7f86f71ddc7e4df335398725099bac6f28604be3a8810d340da1b809191f04a689f8ff05bc3266dbc91d3c8d601d46e80fdc24144d550b6079b25c369feb9c5abddccee0c5afe2f5b3184dd50e9e44fa8a8cf60169b718e6dfa9efbbacea2fd9fd34fdda58677a3d1857767dc4c6430af1956a47fc562a9ddedc2bbe0203aee7decae3ed3bea5a1b4268dcc3c0c56745b5df25d65e3b1fd9ec79716d00b2419c17fdd9e55e22daa5ff42ab03d786422328cd0b1205a0144b9c0f87ae0d66edeca2a08e16aa9c5c13ce985ba4fd7513f8ae4df357561237570af3f1c4729b4416790e1d0f1ebd3191ebb38c66553569422c404d89803180ef83c50b0222240907c2cdd1b48603045109465f0ad57e98d89a24e47c36eaf090e6ca30af83ecedaaf4f3de37bdb53f7383ca54d25402d1e5c0d4a5a9d922c58e7fcdf1a9f997e4d42cd1810d9d669fde465d8ab9bf92ad2b297abb6cfdb0963bd7c6533197b7f043e93af2317fe4e3bd063687a95811f5163e85a3eb169a4c7fd142410db07387c53e22f398380d9c151db6cc605b8cb52c6d07a347e367a37efc7b4a0d333112257542cd7ae6ea68922e6d0ec28886499bcd46a7990bc11b85409d24c3e4f32c434790c0e82cc3eb9c36180227b23f82192040af367e84f85cfa7e304ae5fb53a864cd05e5f98fa025f6b34953ae27d88f3399f9050205830972bec23320d7d7c1d7815be5707dd4855362ba15c25ebf8499cd7a26b7c9f0bcfcced219a2ca501f57c17c6a9af6db09304f886aded1689f300187736edf09e93edf077a265aac3cbead6665859faf4e998b96974db656bfe7b0358375acdc8eb01de62c1a817388fdc929603cd1b674b0d126c09eca42d870da03bd30002e34be71a07e8e906aa5d77534f7d61358373a943299729b19a1ef163315157af682fd59c36b70306a5b78ab19b398a037d907c9709a944c83c8c24a59c18b97282928d98300271fed74bd0d1c81e3ef3b89ad081c94c7bd84d958946e6d17c574bb5ba4f771ed0cabf9236461353dc4f847abc4b691a51b2fe93bc7c3a3518f6e50df1defe6a2d802ad880c7d6a9e80aa03f798b15cb339b158ce38c60085c5fe46151a592acd1e6b163935503fcf009836c103cd28d3a95deda4d25f9c1351a72baf32e290a0a30d4da3103cb9ee0e40752182ef7bd8478c300d63718b04eec38c93c036248fcb5507ceb523c57adbea718bd858986fa24cc7d37bfc04e0bb2b21beabac729916a2e5853723da99f106228e0bca6bc09d9f516f6f44e0a832da0c90f94999095f1f4de8b297eb6cc7a274b3da55507080bccb9fa1ef224242903d276efdfcdeaf1aa6224aaefeace1cf8ff138a87fc9f95ceb0bcadd4221445e955e930cad348726afbbfac21bf71b4304b6025267da21a11605ae129f2500ef8882dfa1c57f20dd54a10a690a6ef515b76faedc215c17a4e036ec015d1463d8e78b7561113924b33bbf96bb8d968c7e68eb45405b98f9473541b8edd33e4b343acf792f5f290c06395882fd31fff09228806f9b357e12c8a728bf5d413b0fe341c878ac4140e26294466918a2a95db6c470594d0e62966775ee812d53c1f4365f2b6ecbf0ab47c2d9045aee64da099087e6ae25d55350415a240e3b6caaaee1ebe2222a56a6b276093bce069adebf6909cb72e627290b32f545ec3c3b514fc95635743177a05a2dfa7aab79508e5f0e28bdfe7f9f95e6edae4a98e6ed634d15eb6f7aaabd46d38d5ec9378cc81ecc9fe679b0d23aad09703e9b09099aea23cefa098fe6e9b8605a71a658b623b66cef920c186e478e056e15a9ea0029bc960d3fbbea2e119e92e30948045a1dbd5190b1fc0ea18f47994c3133072d81857eacd6098a93cd446a34f1ece02d682adf2b0f53b300b820eed9b5b638c3a0b55922c76f7f317f8110b25073ea43f982c99070ab7d90f345f3b86d51a16589de6397ed075df265f23f0eb98d5eebc115c0f37d3fd50805a0b920f1113ccaa39dca4a897adef59e1314d65f9297fae18afc56b55f95a49f468a284c0d1d74fdf70c65b295eeec2527403dbe731dff321eae8cc7773b0322928464f25eaa74ae7f8cda478b61e9d7849d875a2143ec348c95b7c7412281","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"643649ba80ed23fdeeac84c02c742703"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
