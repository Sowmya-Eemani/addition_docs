<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"6c6dfc78e7f9f25816814ffc9e85b8a2046a3739da37042b2655dc9087bddfed5d1d7d35c999cb69c663127188fdda2ccfe2678cee8af81b4e0b57def2b9fdc5457680e60d8e007642d34119bc478c7b6ccf70d5702a7ea63d7a24710aaa93a0c15cead61fc5b7891492cbd933dff9bcc28a540503d000b8f8a8511e547f7f56270192c2e0fcf097171b8a98b0bec354fb770415bb13423403f879d00f45d357f6a890ab541dd72eef1b128c2a227f82234d403387520b97c66ff9c55b22eb4e9b058de0a2ed5c63f4ca6cb476f0a805af23f10f2019ca6f3e34a91a13a11abf6df4c93a3420daa41a043bb81c8d95300f0ddc62dd87ab90355f865316b82a61e9131ca667c1526322aa70c67a810f1bc713987f906996876e6af75d05f0e1446c0b4e3a8a9a649802ee6d0a02905377f894b2917f0b6a97f2012faea4ddca4a0b885f015dc4591b5423d33e43f07f1e57b2993457ace86ee95f4306f1f9e61dadd65dbab774da25b16070d35e729c5fbdf0a517fe4752d9d0c69144bb72df760edf2f9f9d4ea897992009f8923ebceb38e2e1b1651a561c8b2290f89ac8bc217f6d6e7679c96236f8c4837a213eba6a763e6203a3ad22bb5339015ac934190894095d21f7270255319ab51739399a9a76cb4e3e97d31dc647f2f8496577b59108718d924d63ccae6328075457df2deac5e77fbd5cf37e81e737b405e380180a84cffd32b7d040c148869bc02cb44d42673f08a623e9b56a03d28fb7abd36f6b9f2dd424f1223f28332569213c304a24a5f8cca0bc0ac68cf7783a612aefdce81ff8defdcfb655ff1e38055a206d1a696a2193cc92a79b10293ad63495cd66519edd725e6dedd264dad20cad1cd9177a513c64ade8dd590c00f4da5166100451f0fe0ed105f6275715d7c3ebb971c220f89495c62fe889672187b5b2cb9fa5f9e4b8dd0c8cf6a3339729d17356f7f1bdf35ae50eb2763a9a2ace4a8fb1203326082824b83c942075a4803eb19ff54284e36507ae4a71f09c4de716df43ff57a2a5035da3d2d3832a11e4713f9eae4b0842293878a89f5d5570f40499a9b44a524aab8756606fe6cd96d89e8c79cdffb5cf198f792a7c6682e58cab9efcbc12cb41f8e3c7d7fc9520654bb8a8efe000af4f771131bbaefb34eb29bc09c97d81fa23a174d0de4b82a051b6f33f07389fc0a02866b488dfd7d457ed02d4af51812d94d0cc7e1f89eca2b4e443bdc528af2014995d1fab997cef4c6a9773936a401f7890a33483c5d2a2e600833689149c2ecfc8a4e709f1b81a0fb38fd28e143e92168a79ca29a3f090036046ecdd142a49bc1d0f0b6597c2649e2a1b8589112c9104a8cf58a5140a0bb5f7161ea5db6f7084ac8b90c05ae2ea694bef83011fe649ed44509afe926b43b61c038b0d5337c338439fd5b9a421183753a54facd2aaa13595429a089044cadea4a25289c2e1014755a0f9036ac1c310adb6b3cd968baf5f867e25b928e7a7abb026f5dc2e974e74efbb78e8fc41a391ae41d832476c7123c2257b71e6488fdc3328d28bb519a162d7557b8758c6b90e03d710f3567bdbc7cbe59f0d5a7749ed3f796960481a91def09a9d8eee354f6f835a30401d630c13e6e00feec384f93fd724c40f333640141f64d466f9a59e32f5ccc08a288b7f03d29cb77e23b8bf51b02cb50fc4213f7fd1ad81072e91a0bf10003468f9bfef96a325a023a258d83325de9ff8142aa7194c92258d5897826111079d57bf06dcc4ee6735eedb1ca803a4d029679366d8c133959950d49359233f31bd071b9f1af392da48432d316ce61f757657065acd6f000aada21e3c1c7d954b5d98c91ac8460a0b230c4399e9936e01278021a0d0a659233061fdfbb3d5df4e0b8040422e0c2391c470a870bea6c7f2df454c05ddf6ac78dd27e2725fb1e4fabd49cb2940263a98aa61bb08b3f71853087bb3d2b5e8780cd47f545f6aaaa1aaef7707d2e02fadd43d53cbbfec459c68fd073635253e1585c4a2d2985ce812cec81981653ce91363b2cd81ef0ce75655a814f00cf3efdaf375f80a76d6fbf6a80d1847f18149e63ab0018087e637d83b65b4c1eec72312e743484f5a5f13c6044b0abccd5b4cdcb4e3bf8489a85b0452785de8441c988d424c47a9fee816b6e4e0b3d9aab70a31c426fef1712204609def10d5161c055d46b68cbc8d2aa7af9f28aed1c821d4d823fc519248e5bb38bde2134aaf3db4db2ae9a69b42d5dd85c33efc735e80b4954967c0c1504524a5d94b879b20896fced92d701685ac1c40c47249b31c4140ff372b3a5d02d47d1c7a9e54822288e1c875051352f5afb325a6d58fcd7f892565d3a19487b62365d222eac825031273cf2197dd90c828d031a994c85ce163e9ac45c7730b4a020db9390533ded6c3a11715a793ecd850ebd721255d4e2c9dd520042126802b9da024fa40cd36eace8f4b5d99f8677deb488a4e310e9ca7e907f4b1fef2abbd68d4ac3e0a2e30278aeda10fc76aaebc7a4eb9acd43573802b5b86d61abba6df1714a4c2232d7964c16f4c329d30253848eaa6a2ff1e8a65fb568e2aa4302f0f4b2169e888520e19ba45531a20bfc3102325380cd7496ba4a0e2f283c0525351cb3569e4400f08fb5e582eebc6538c206d12589e2dc91f594c8980a40d95f38047118395f9ff75b0fb460a3c88b1ae9347364cc61f00a75bcb4e4186574a2db8970a68307fcccd4ba074e1c6856f1a508604f21665d8fa65e83093356989f8eefe09507e3169d2452cc4d5d235019bf7c2677a6351c0202d65d3c66046f6aee57beafb21a38f4c5724ce0aedb05103d0dd5a52ff2183226eff096505a146db5a9590684892f5533325b4ef7079e86fc498faec95f7737c158fda035a2cfdd30ba8680ab92386418ff20ae34d6c8df1165391f99dec5cad875e060083657998f5b934ece79a00729c4d61e5148941948a1efa538c4324418d69617482d8657300c7ce6369395e43f62ba360c0cba9ff73276eafa392cbc7c5c3ffaeda84d46b1f031fd97b61984e958d096b64b7bb336bd096f280c9425954e54b512704e49363b3cebbab9a35b1fc067c47646bca4972dae5fb3bb5cddf0db04e4824e660e1098674b44bcae8a5f4e4cd71905cfefff1648f5bf6a0f216ef7d7e26e31d49986c0d40a72f2f3623e60e95a2900cc14dfc2ce8cbeb4665aca0afa0f6b05e98724cabe2261ddd0195fa1bd98fbaa4e46aa70478cc6c31fbc4e51878130bec47bb2ac9a051fb25b843379c1baba04fb4c0d030d33ef446a05c02fcdf6dfa8f61638dab1a88d09a8b0eace85b9b274947fce53d2db4a16fd477baaa96e7e563cad803244e8a605b3a853407c1266bb9b87b380f529e8f03fdde82b4749170270c732ba55f0c15457100dba97709525527f63263d02af83fa23f2f1bb3279ab802110e90c1e0eb0d2e8b2283db87864d0abdd8d6c732a8989e8c840b058666fdbff9f7c2e2202fd2a8ca142a3969825a208aad7a0bad4451e97e7bc948ffb1242ce400204bca19f0ad9659f92f30eb5796c11d6d0c247d3996fb6e50e3969f4dbe47945789062c57225dabaa404330db02ac70ee8c60a04feba973e8d2d8e973acabf66025c7ffd669927e6f8297fa3991e4d155dc58770ab8a56064d0f898e96d4328bf4ad401b5f8eb95b6ed98168b616f2664beb3c5cd8436e7eef6c339046cc9797d5ca724dc3ccb305b2c39b8c22e19079857855ec8251d040a2a25b2ab5ebd7b8cea330b2cbec8d66fdad3e68f8b9bee16226598fbb87bb3a4c8a78084eda7a7004e5f68c232d17d11a6611c141594a4f668b064bc29686b4339454fbad83a7a3ff26df6158c94c13375a1674755045e591de021be0c012e082ded9b42d3f3f97d0767f522204a1f24e4ac5a3a7c4f4253f196ca5230cc328da41d8d5b7d9c2e95842989ea2cb2e9984f955b9723e413fdb92016e332d30cebef44b4aca785c6943cee62f09dd6898630c15f765a10b97b3a13c5f75bea0323c2c319fc748f18dc9a9e9f419afa66674ad14c7c55c01748354bd01a79294aef4e0b46615bfdd82fefd7aee1b008e450147e1e6bab953f7af228477694ca8ccc0807332df3a042b636c5df340050094bcacfd21eedb756279fcda9f70c4ec290eedacf50824cae28ca2fc18cfdbb163f316950a33d498685b079ff321aafaa6137a8becfab5b6935529ffb5c54ee933ca2441720124153282fa092e22b81e7ea3a8b9509a52088d213379c361284bdea57be0c067a6d445bd20d828591f749cdeeac14f6885ef75f15393e704f9b11e83b8e50f631400f72ce9c7253bca4184778dd168f9d52bd4684c56cbd9ee690496a769281a851f133b94bcb62fea1964edaa6f9f2b8f586a05ccb4f7b8dc27a6029662247180072c5468476c6007179859b8232ea502f0c8c6e2ed1f5d66abfd1b5d3e5a00ad6f08e5bd46df91910bec05a5585a68107c9a7dc111946fdd8cb34a7d7311fac7e564c5715721cdfdbd3d04d4729c18ce99edfcb9f1e866119b4fe9642fcf2a81f4c87a283ce51a198444657db0f4ac7d55d7c7000364615d62708cd02e209eede0c6c24635f45b873fa43e6b6e834f7a0d209630b1114af2014d8126807fc6f7f6a865c9f8c04bc1670d82997909a410e487d46ac186a982fa6ec7fc1bebad18d07ffb47e2ea427b0b730450e6a01ebd1b6caeff739a3f2407354aa342566d2ea6d0b0f6a7ea034e9f698dcd352f44fae745942113f8aed689c435e445d584888f8a9a0f51b72d3041fec01df2a9ca5c05a6029dbca30a39fb52b5f3711c8adf5828b2e0b284791decac91135913793d93dcf468d76901a0f63b1","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"643649ba80ed23fdeeac84c02c742703"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
