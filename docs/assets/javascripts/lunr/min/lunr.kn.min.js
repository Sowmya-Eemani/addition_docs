<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"2cad5898d48746300d41b1a843600157fbc1b86015bc41f0a53b04296af0411515b3dde3b23f7639eeb1c0f48c9fa90895a80e8ac87d6adc6fa58c42fcb9ddb40bcaf8565fef4113a394dcce27e0d131221a77f09f1436f8beb0dd42ad2d02114fdaa48cf4fb6c64fa56b406cba481810e7d964ba9ebda2506e4073d9f32c96ada8db425e25b20856db36125dd95b6fabd6bd7b7fcbccd10d6a39e9d769b419de3bfb4cd26e427fed7a2c5845c53c62b2b7136700bdf150f3b5c6581dd23596013cf3d82245b4533eb616ed383616789a894db7c1756940074bb9af1bd0ad3253e51b86bad9efdae2888f419ed5d12430f97f0f823a97af558f76505ee280575dd6c49d0480020cbc283d5f375d335ef8f582da98ceb19663dc15bd21754da865ef80b4209876817e58241a3da165c8403896b96d59c7649ddea3c0ddcd4c4ec817911ee6b27ab4fc5584e4f9ee5846835ab728cbb7f92a1140b40c38762ab8c1f052ece318c64bf5a3b1e524e76830754d841e09c3d47701558ca34c10b93253dc398fcd711e1143e5788fd594c9be81b029f0fb4e9fc7b0eb85ac48612137b2e142faadeee9449c28a1c91ce922e1485d6f97eb7bb512f48b95cb0e9808c086b88f7835333eefa5b4adeab12adbdae7c2141bf50fd76a7306d1f88ec193a78d27cd4bf9f2df439e8177de85d2f7febc36f7f5725f41b8cc50ec8ae018a8c3238e1ce051fdec7db78f6f3cf443b18a62ed482fc8e6636b406145d1335e0b849b4c9e5a0d10e367b18a0e0a393d103e313db915155a2a2da5a7fe6953f13ff884168956aea0685971bbd5be3d2330826ecb97df7682e44b66501a3d6a4ec04d3cda0a3291401c937ffd52f548878819b003248a988bfa14a2b2e3093a25ccf509d2fea6d6551e40b238f1c2fdefeb2cb0d489cd631b647a28d2e6bfe57bb777c57629a87fd42b5d00dfcfc9e9cb59da94850832bd08f666834cb660aee4a0aa702be3600aff567394f6166b0b42ddc3a4acfe917697ee92cb15d3927603b26bff9ea7a7af5ef87ec119fad3cc1d08929d497dc371c2f4d89a31482c92f45a0463f4058f46adf62e43d9ff39d5049c52fc9091a563449f5309295b768385db0fb8065a6673ce6a61c3434a9c700d0419d5dad6a7441d22feeae124a0efc181a14c3ace16362745bf54475892e152b1fa25f0c8442db69e9f01a021a2802fb49e315b43644cc03c8ef6c98af86c375fd033c9ca4501b9efb62c3b45193df723f7be509d7ee06d0b2823f7b1881f5eb0d518ae27967cc508779edd835cee1a240cfeedef28e1785467671ac3addee768a334beee32c639518efb8d792ca8ac601e1c6be224bf56a4b8fbf6650c046dcfa8a5f9de58ab2ec2ceb286699e3cce73fd6dfd5ff70d05ec9b5ea50df295b219a0f36840dd08f651149af8ad4f4afedc85c2795682e8353197069fb9b575a30cd4d472f9e4287296dbe94c5444759e6beec3bd0c81164ad7279fc04301228b6e630ad74271bd59ae45c328ddc630f2650b641a1c7fc50ab20cffae4c56b40022c13fdaba746074611e4532e47484319335793cb4cb1d5a38644e3993f02178758329b49fa33d647673a6a11ddbad249c213b02601db408115f6cc61c657f0dd8cdd7a729488b5981883f8069c3f8514418710b31eca4298259d09a32d19272c70eb12d5e1857fb461411901f5544bb48407bd8a25665e0ee0f77f9bb3229927ed55cf72e1d24c98233b5b7357e79443710c3b0267138926313e759730e0d4567b8282a633b098bedd75544b4d2af4e360f523cd70d47f035a8d895e3d44fc2f5495be19b3daa0066489f46bd0102b2c77f8933e9782edcba25230ab5cb89447c8dc7f06b78e56dfed0f6a6ffa314b92053b840ca0df3aa0586beff9884c1776c48378ece4d025610a1b59502306df03a735bed38d31948e09e0ba4d5e6a9c42a11eda92b7c4301eb4104257404e232be94908f3fc965f93630254e03f15faa43be9e4ce512fc74d06c12cc8aa8be11b9afdc954aa2d882b85fac807095a36665ea3cb2a20e96b308099307cb1f8e7c579248852db8258401b4e9491295175cceae9592be34e215c561193d57934f1c57752bca4a885a03bc224c090ef7d9de53a150a9871cb8f0bac36e1b7837cf8b7200364cb3258b5ac700751fa82ed1b36af11260e16cd0dedce44db4157cd7f0faca661e6513ff29bbb870e60ed84e539e72ccf03d8235a82a1c3ad2c079af780dd14697831d7b70f623c11edfa191ad1a2b4ceb2cc68fd78609543cec7879d74e122ff6130c4525b592a7e29f6a894e99803a4d1d906e30611c33cc5ffc0b10c112cb73f022fad873be14bee45c77dbf5c7d3f16e86ae896813d0192f4e91df4585b887da913659f89883ab4f8774eed8f0997f4d1597e62a36a6f485a6c160d294fc599d10d61b2bced2f08276c86f2c3ea0f5add907d3f8e6b992104e1fb7ef60f627595bc5e606ad6783e50c9ed3f4af75a5a01270c8556a2a6b69a3e4a0f549a30b4e4a42885923b9d9ce322aacaade9a2777a6c86d523232b9f3ce99042dcfa0b1af9fd3613c36872bf2b6c939ed55e1f6e9ca61114f4ba17b28ea4c1a86cef4f4f22bc742f4b13fe58ffcfcdb9ebbaa92103f3c53906ef8af93828d6c3ac9ed045473fcd61102c59760c072d558c8a4f87aacea68be522fbf25dbfd50f1a386982b2762d1e444c0bec5eb5716ec6e55a5dc3011e420bdf322c44939b1925c2bd9ab3aebef02173a479b078645153ea88fe8ad69812a719f149b510821fb47e4a1a52aabfed329a07eae64e53e11d9700a6ed892c5535f778870b636132fb401f98c4819656adcf5c37ce4d9fb0b2d567fde48288ad495dd3473b0cfee91c6041809d5dd465fd93ba30afd53147d54b88bcd1c0ae3f97775de7b6d8a38342f399043226ec5f6876f0abb1fb152141a6f28fb36d4775c077c72e85d514c6acb4033235c7d5b0bd2c971f1e13c4d3725c550e8786b7c899fc3d2e64ea8415f108cd8eb82977c0d5bea835d0f22dfca93e3035bc040cf20461d9f69de89cae3b0d127cc32173f31038cd67101785b835e728ce37590bd55b0eb0f45d16f90870a03975c2210a22009ca33ede65f85a608d0e4522881402a361c89b010be8ee769f13630649a27c2a2f671b86d500113ba8d7d5710932824a9aa542e2aab6612f34fe0deb8acb851a99a2e88c5172fa202415b4206b18a22f1724e511d380d106092caa362f31c34c3bcbcf24302aa740dfcf71b8212cc911853509e0b00cc80e9dc82eb054ac260c27779406d12ba9c9e979ddca890deccd35c0c7640757c0a2c99b618514b37ae072dcb0ed79f8aed0dea8f0d97d2623ca3b23ae3050e806a997ccc528ec580790de0594d7cf9a44d09d08b6c9a667e48ac93a32a8cb0a64a5ceac708161cdf33e9e5c0b570289df3dd91bb045bfd83b68086b31e5763b316f8a0350fdfa8be6c84226d202c7a0ab6583b550060db6e94d05bfde999e9a254c7f2a7859e5196d0d34f71ba169ef7cdfb288e18f22e750490e1cce3f22cea95def03e0b2d1c4d217d3726c5fe5a8c8cd43fbf03bd2e71f69db57cd0b5e7e1ff3a87a65e08b390d728efc806a95e72a93fb383f5cbe39059966f799fa2bf634a9501b957139b6602a21e64734ef303b980427f7fa4ca47bfad6a9619a0be1a5bcce6f5ac369ccd46ac1197fc8288ee47f7a230c3f330e9dc96ff3bad095fb3d3e1b24b90cf970cc6d1f65d45bef6e1c228b8645a49a02bfc2c226b6aabc21ab2a04fa76fb73011465f9acd834c7fa5841021a7af800848b8495c87f0587207f582b6f61bd663965e8edf3940c8999aed26b29fda4c874aece77cbf86455fd73695044418aa350567579b8c54f34dc4d1d0c7677348c616edb9be077d2093d9105c564a4eea60df1f0a06638c5c1e451baa354f95f3546947e8679ecd1899fef2602aecc33b3a5f705b199b6363372d2d6fb628f75cee95aee652a34e982d5d096f0af2c37881d7818a46f737769015176e6122592bf4a869cc0cbfd9f34ae15ed9bc6bcc7706d7df54a7203d27e8ab38315187b1b637337d912e72ec310d85c9dc4eff87a50563420472ff0374a4564fc29bcc5774fbd8c13f7df9701fc23c85ece56387983047f456298a0ecaf1115bb951660ca843027bcee2cd3f8931a06894ab24b2dd197ed4f6f88d1575ef2d260b8272a470db8a7dc465a589cfa08edee50df16b2e49aa5c2ae99cb00b35810ed8bb0b8182825f041038f5264fc3fec5ac03b107df515d9b89633a6b4f8ccc00ce09734b866fa7939d5890b08fa9ae433077b3fa01c2cbfb0ee72450d2b9ebec91d4c48796f698654e16fc5f595fc6b6a60c208b9f6b477f7a87d508aa4ef32d5b6afba74b55d7027be47c24f4c53703bc34c9aee7c30ec53a3bf26b32f5e5b584ff714700b703e58f8af49c30c78b41014626a29412fd9d8154a17a38df3624808166bf638863fbb8ec7b40f9bca95af1d955358db1f925503ff5ac3c3cce7ecf9bb8b944c6eef6ab05fb98cfa2c586b9341edef1c78a59b35e5327f0621d243d4ba6f90f8aa191d1dfb884efc43fd0ee11d1a365c7df8c9f0663e8e4b3f6dc80309f65f1e49cd3eb777baa70e3d4a54f2a356e6834e816d3cfaf9327fa640952fe24ee54e0d4cf66c9fb3757abb425a0a6ef301531aca9e5d1bd4392e8f852cd6a7e600549976e1f73df3443b40e6a95fd04c88797762cd90776862bea59d349007a148451caf5280f94428d81ed647d0479512972b62d50e1fdddc824b9e8f548dafea60243a3751c7b48b7221eba4389d016bc0f22f18daa56a39291527110399f89725e599c4e06ed75dbc8a2ce0b1f0978ffc8785f080aae9f5468b2fb9610a1b15c34641bb575184aaba7e7dabd6c2a515e6f9c6b2de37431f7c7784891de44258662f409fb65f0a7290edf2c187c55bb0290482318f9e938f6d1d64897daea466a76eb48715d572590663dc0e7e","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"643649ba80ed23fdeeac84c02c742703"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
